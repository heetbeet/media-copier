"""File containing functions usefull for reading and writing into a file-register.
This is to keep track of files that was previously copied from a sd card to a hdd.

TODO there are code repetition, the general structure is still sloppy.
"""

import os
from datetime import datetime
from misc import dotdict
from collections import namedtuple 
Fileinfo = namedtuple('Fileinfo', 'path size moddate copieddate')


def date_to_str(date):
    """Convert a datetime object to a string like 2019-02-25--14:55:55
        
    Examples
    --------
    >>> date = datetime(2019, 2, 25, 14, 55, 55)
    >>> date_to_str(date)
    '2019-02-25--14:55:55'
    
    """
    return date.strftime('%Y-%m-%d--%H:%M:%S')

def str_to_date(strdate):
    """Convert a string like 2019-02-25--14:55:55 to a datetime object.
        
    Examples
    --------
    >>> date = str_to_date('2019-02-25--14:55:55')
    >>> (date.year, date.month, date.day, date.hour, date.minute, date.second)
    (2019, 2, 25, 14, 55, 55)
    """
    return datetime.strptime(strdate, '%Y-%m-%d--%H:%M:%S')

def file_date(filepath):
    """Get the date of a file as a datetime object.
    
    Examples
    --------
    >> date1 = file_date('file_register.py')
    >> date2 = datetime.fromtimestamp(os.path.getmtime('file_register.py'))
    >> date1.seconds==date2.seconds
    True
    
    """
    return datetime.fromtimestamp(os.path.getmtime(filepath))
        
def to_key(attrs):
    """Get a suitable comparative key from file attributes.
    
    Examples
    --------
    >>> attrs = Fileinfo(
    ...    path='/bin/true',
    ...    size='27168',
    ...    moddate=datetime(2016, 3, 10, 21, 10, 57),
    ...    copieddate=datetime(2019, 1, 1, 1, 1, 1))
    >>> to_key(attrs)
    '/bin/true,27168,2016-03-10--21:10:57'
    
    """
    
    #These params are hopefully unchanging for the same file
    #I wanted to add a md5 hash, but that takes very long to calculate
    return (attrs.path + ',' + 
            '%d'%int(attrs.size) + ',' + 
            date_to_str(attrs.moddate) )

def to_register(filepath):
    """Get a suitable key value pair from a file. Note: copieddate is taken
    as current date.
    
    Examples
    --------
    >>> key, value = to_register(__file__)
    >>> value.path == os.path.abspath(__file__)
    True
    >>> value.size > 0
    True
    >>> isinstance(value.moddate, datetime)
    True
    >>> isinstance(value.copieddate, datetime)
    True
    >>> key == to_key(value)
    True
    
    """
    attrs = Fileinfo(
        path=os.path.abspath(filepath),
        size=os.path.getsize(filepath),
        moddate=file_date(filepath),
        copieddate=datetime.now()
    )
    return to_key(attrs), attrs
    
def dump_fileregister(dirpath, register):
    """Dump the registered file information into a txt file.
    
    Parameters
    ----------
    dirpath : str
        The output directory where the sd-card copies to. The filename where
        the information will be stored are dirpath/fileregister.txt
    register : dict
        A dictionary of file information; keys are generated by `to_key` and
        values are `Fileinfo` namedtuples.
        
    """
    
    filepath = os.path.join(dirpath, 'fileregister.txt')
    with open(filepath, 'w') as f:
        for key, attrs in register.items():
            f.write(attrs.path + ',' +
                    '%d'%int(attrs.size) + ',' +
                    date_to_str(attrs.moddate) + ',' +
                    date_to_str(attrs.copieddate) + '\n')

def get_fileregister(dirpath, forget_time=90):
    """Read the registered file information from a txt file.
    
    Parameters
    ----------
    dirpath : str
        The output directory where the sd-card copies to; the fileregister
        are stored as dirpath/fileregister.txt
    forget_time : int, optional
        As a precaution, files that were copied more than forget_time days ago 
        are forgotton and skipped from the txt file.
        
    Returns
    -------
    dict
        A dictionary of file information; keys are generated by `to_key` and
        values are `Fileinfo` namedtuples.
        
    """
    
    forget_time = 30*3 # in days
    
    filepath = os.path.join(dirpath, 'fileregister.txt')
    now = datetime.now()
    register = {}
    if os.path.isfile(filepath):
        lines = [i for i in open(filepath).read().split('\n') if i.strip()!='']
        for i in lines:
            
            commasep = i.split(',')
            if len(commasep) < 4: #what happened here??? leave this line alone
                continue
            
            #remember, files can have ',' in filename
            attrs = Fileinfo(path=','.join(commasep[:-3]),
                             size=int(commasep[-3]),
                             moddate=str_to_date(commasep[-2]),
                             copieddate=str_to_date(commasep[-1]))
            
            key = to_key(attrs) #'%s,%s,%s'%(filepath, size, moddate)
            
            if (now - attrs.copieddate).days < forget_time:
                register[key] = attrs
                
    return register

def update_fileregister(dirpath, attrs):
    """Update the registered file by appending a new entry.
    
    Parameters
    ----------
    dirpath : str
        The output directory where the sd-card copies to; the fileregister
        are stored as dirpath/fileregister.txt
    attrs : Fileinfo namedtuple
        The attributes of the file to be saved as a new line.
        
    """
    
    filepath = os.path.join(dirpath, 'fileregister.txt')
    with open(filepath, 'a') as f:
        f.write(attrs.path + ',' +
                '%d'%int(attrs.size) + ',' +
                date_to_str(attrs.moddate) + ',' +
                date_to_str(attrs.copieddate) + '\n')
        
if __name__ == "__main__":
    import filelogger
    import doctest
    doctest.testmod()